---
- name: Get Prod VPC
  amazon.aws.ec2_vpc_net_info:
    access_key: "{{ trident_one.aws_access_key_id }}"
    secret_key: "{{ trident_one.aws_secret_access_key }}"
    region: "{{ trident_one.aws_default_region }}"
    filters:
      "cidr": "{{ ocp_dr_trident_first_rosa_cidr }}"
  register: prod_vpc

- name: Get DR VPC
  amazon.aws.ec2_vpc_net_info:
    access_key: "{{ trident_two.aws_access_key_id }}"
    secret_key: "{{ trident_two.aws_secret_access_key }}"
    region: "{{ trident_two.aws_default_region }}"
    filters:
      "cidr": "{{ ocp_dr_trident_second_rosa_cidr }}"
  register: dr_vpc

- name: Get Bastion VPC
  amazon.aws.ec2_vpc_net_info:
    access_key: "{{ trident_one.aws_access_key_id }}"
    secret_key: "{{ trident_one.aws_secret_access_key }}"
    region: "{{ trident_one.aws_default_region }}"
    filters:
      "cidr": "{{ ocp_dr_trident_bastion_cidr }}"
  register: bastion_vpc

- name: Create cross account EC2 VPC Peering Connection
  amazon.aws.ec2_vpc_peering:
    access_key: "{{ trident_one.aws_access_key_id }}"
    secret_key: "{{ trident_one.aws_secret_access_key }}"
    region: "{{ trident_one.aws_default_region }}"
    vpc_id: "{{ prod_vpc.vpcs[0].vpc_id }}"
    peer_vpc_id: "{{ dr_vpc.vpcs[0].vpc_id }}"
    peer_owner_id: "{{ trident_two.aws_sandbox_account_id }}"
    state: "present"
  register: vpc_peering

- name: Accept EC2 VPC Peering Connection from remote account
  amazon.aws.ec2_vpc_peering:
    access_key: "{{ trident_two.aws_access_key_id }}"
    secret_key: "{{ trident_two.aws_secret_access_key }}"
    region: "{{ trident_two.aws_default_region }}"
    peering_id: "{{ vpc_peering.peering_id }}"
    state: "accept"
  register: peering_accept

# - name: Create VPC Peering Connection between ROSA VPCs
#   amazon.aws.ec2_vpc_peering:
#     access_key: "{{ trident_one.aws_access_key_id }}"
#     secret_key: "{{ trident_one.aws_secret_access_key }}"
#     region: "{{ trident_one.aws_default_region }}"
#     vpc_id: "{{ prod_vpc.vpcs[0].vpc_id }}"
#     peer_vpc_id: "{{ dr_vpc.vpcs[0].vpc_id }}"
#   register: vpc_peering
#
# - name: Accept VPC Peering request for ROSA VPCs
#   amazon.aws.ec2_vpc_peering:
#     access_key: "{{ aws_access_key_id }}"
#     secret_key: "{{ aws_secret_access_key }}"
#     region: "{{ region }}"
#     peering_id: "{{ vpc_peering.peering_id }}"
#     state: "accept"
#   register: peering_accept

- name: Create VPC Peering Connection between Bastion and Prod FSxN (for Ontap API access in further automation)
  amazon.aws.ec2_vpc_peering:
    access_key: "{{ trident_one.aws_access_key_id }}"
    secret_key: "{{ trident_one.aws_secret_access_key }}"
    region: "{{ trident_one.aws_default_region }}"
    vpc_id: "{{ bastion_vpc.vpcs[0].vpc_id }}"
    peer_vpc_id: "{{ prod_vpc.vpcs[0].vpc_id }}"
  register: vpc_peering_bastion1

- name: Accept VPC Peering request between Bastion and Prod FSxN (for Ontap API access in further automation)
  amazon.aws.ec2_vpc_peering:
    access_key: "{{ trident_one.aws_access_key_id }}"
    secret_key: "{{ trident_one.aws_secret_access_key }}"
    region: "{{ trident_one.aws_default_region }}"
    peering_id: "{{ vpc_peering_bastion1.peering_id }}"
    state: "accept"
  register: peering_accept_bastion1

- name: Create VPC Peering Connection between Bastion and DR FSxN (for Ontap API access in further automation)
  amazon.aws.ec2_vpc_peering:
    access_key: "{{ trident_one.aws_access_key_id }}"
    secret_key: "{{ trident_one.aws_secret_access_key }}"
    region: "{{ trident_one.aws_default_region }}"
    vpc_id: "{{ bastion_vpc.vpcs[0].vpc_id }}"
    peer_vpc_id: "{{ dr_vpc.vpcs[0].vpc_id }}"
    peer_owner_id: "{{ trident_two.aws_sandbox_account_id }}"
  register: vpc_peering_bastion2

- name: Accept VPC Peering request between Bastion and DR FSxN (for Ontap API access in further automation)
  amazon.aws.ec2_vpc_peering:
    access_key: "{{ trident_two.aws_access_key_id }}"
    secret_key: "{{ trident_two.aws_secret_access_key }}"
    region: "{{ trident_two.aws_default_region }}"
    peering_id: "{{ vpc_peering_bastion2.peering_id }}"
    state: "accept"
  register: peering_accept_bastion2

- name: Get Prod private route table
  amazon.aws.ec2_vpc_route_table_info:
    access_key: "{{ trident_one.aws_access_key_id }}"
    secret_key: "{{ trident_one.aws_secret_access_key }}"
    region: "{{ trident_one.aws_default_region }}"
    filters:
      "tag:Name": "prod*private*"
  register: prod_route

- name: Get DR private route table
  amazon.aws.ec2_vpc_route_table_info:
    access_key: "{{ trident_two.aws_access_key_id }}"
    secret_key: "{{ trident_two.aws_secret_access_key }}"
    region: "{{ trident_two.aws_default_region }}"
    filters:
      "tag:Name": "dr*private*"
  register: dr_route

- name: Get bastion private route table
  amazon.aws.ec2_vpc_route_table_info:
    access_key: "{{ trident_one.aws_access_key_id }}"
    secret_key: "{{ trident_one.aws_secret_access_key }}"
    region: "{{ trident_one.aws_default_region }}"
    filters:
      "tag:Stack": "rosa-consolidated*"
      vpc-id: "{{ bastion_vpc.vpcs[0].vpc_id }}"
  register: bastion_route

- name: Setup route tables for prod
  amazon.aws.ec2_vpc_route_table:
    access_key: "{{ trident_one.aws_access_key_id }}"
    secret_key: "{{ trident_one.aws_secret_access_key }}"
    region: "{{ trident_one.aws_default_region }}"
    vpc_id: "{{ prod_vpc.vpcs[0].vpc_id }}"
    lookup: id
    purge_subnets: false
    purge_routes: false
    route_table_id: "{{ prod_route.route_tables[0].route_table_id }}"
    routes:
    - dest: "{{ ocp_dr_trident_second_rosa_cidr | default('10.10.0.0/16') }}"
      vpc_peering_connection_id: "{{ vpc_peering.vpc_peering_connection.vpc_peering_connection_id }}"
    - dest: 192.168.0.0/16
      vpc_peering_connection_id: "{{ vpc_peering_bastion1.vpc_peering_connection.vpc_peering_connection_id }}"

- name: Setup route tables for DR
  amazon.aws.ec2_vpc_route_table:
    access_key: "{{ trident_two.aws_access_key_id }}"
    secret_key: "{{ trident_two.aws_secret_access_key }}"
    region: "{{ trident_two.aws_default_region }}"
    vpc_id: "{{ dr_vpc.vpcs[0].vpc_id }}"
    lookup: id
    purge_subnets: false
    purge_routes: false
    route_table_id: "{{ dr_route.route_tables[0].route_table_id }}"
    routes:
    - dest: "{{ ocp_dr_trident_first_rosa_cidr | default('10.0.0.0/16') }}"
      vpc_peering_connection_id: "{{ vpc_peering.vpc_peering_connection.vpc_peering_connection_id }}"
    - dest: 192.168.0.0/16
      vpc_peering_connection_id: "{{ vpc_peering_bastion2.vpc_peering_connection.vpc_peering_connection_id }}"

- name: Setup route tables for Bastion
  amazon.aws.ec2_vpc_route_table:
    access_key: "{{ trident_one.aws_access_key_id }}"
    secret_key: "{{ trident_one.aws_secret_access_key }}"
    region: "{{ trident_one.aws_default_region }}"
    vpc_id: "{{ bastion_vpc.vpcs[0].vpc_id }}"
    lookup: id
    purge_subnets: false
    purge_routes: false
    route_table_id: "{{ bastion_route.route_tables[0].route_table_id }}"
    routes:
    - dest: "{{ ocp_dr_trident_first_rosa_cidr }}"
      vpc_peering_connection_id: "{{ vpc_peering_bastion1.vpc_peering_connection.vpc_peering_connection_id }}"
    - dest: "{{ ocp_dr_trident_second_rosa_cidr }}"
      vpc_peering_connection_id: "{{ vpc_peering_bastion2.vpc_peering_connection.vpc_peering_connection_id }}"

- name: Get Prod FSxN Security Group
  amazon.aws.ec2_security_group_info:
    access_key: "{{ trident_one.aws_access_key_id }}"
    secret_key: "{{ trident_one.aws_secret_access_key }}"
    region: "{{ trident_one.aws_default_region }}"
    filters:
      "tag:aws:cloudformation:stack-name": "PROD-FSXONTAP"
      vpc-id: "{{ prod_vpc.vpcs[0].vpc_id }}"
  register: prod_fsxn_sg

- name: Get DR FSxN Security Group
  amazon.aws.ec2_security_group_info:
    access_key: "{{ trident_two.aws_access_key_id }}"
    secret_key: "{{ trident_two.aws_secret_access_key }}"
    region: "{{ trident_two.aws_default_region }}"
    filters:
      "tag:aws:cloudformation:stack-name": "DR-FSXONTAP"
      vpc-id: "{{ dr_vpc.vpcs[0].vpc_id }}"
  register: dr_fsxn_sg

- name: Setup Prod FSXN Security Group
  amazon.aws.ec2_security_group:
    access_key: "{{ trident_one.aws_access_key_id }}"
    secret_key: "{{ trident_one.aws_secret_access_key }}"
    region: "{{ trident_one.aws_default_region }}"
    name: "{{ prod_fsxn_sg.security_groups[0].group_name }}"
    description: "{{ prod_fsxn_sg.security_groups[0].description }}"
    vpc_id: "{{ prod_vpc.vpcs[0].vpc_id }}"
    purge_rules: false
    purge_rules_egress: false
    purge_tags: false
    rules:
    - proto: tcp
      ports:
      - 3260
      cidr_ip: "{{ ocp_dr_trident_first_rosa_cidr }}"
      rule_desc: iSCSI
    - proto: tcp
      ports:
      - 11104
      cidr_ip: "{{ ocp_dr_trident_first_rosa_cidr | replace('/16', '/8') }}"
      rule_desc: Peering1
    - proto: tcp
      ports:
      - 11105
      cidr_ip: "{{ ocp_dr_trident_first_rosa_cidr | replace('/16', '/8') }}"
      rule_desc: Peering2
    - proto: tcp
      ports:
      - 443
      cidr_ip: "{{ ocp_dr_trident_bastion_cidr }}"
      rule_desc: API

- name: Setup DR FSXN Security Group
  amazon.aws.ec2_security_group:
    access_key: "{{ trident_two.aws_access_key_id }}"
    secret_key: "{{ trident_two.aws_secret_access_key }}"
    region: "{{ trident_two.aws_default_region }}"
    name: "{{ dr_fsxn_sg.security_groups[0].group_name }}"
    description: "{{ dr_fsxn_sg.security_groups[0].description }}"
    vpc_id: "{{ dr_vpc.vpcs[0].vpc_id }}"
    purge_rules: false
    purge_rules_egress: false
    purge_tags: false
    rules:
    - proto: tcp
      ports:
      - 3260
      cidr_ip: "{{ ocp_dr_trident_second_rosa_cidr }}"
      rule_desc: iSCSI
    - proto: tcp
      ports:
      - 11104
      cidr_ip: "{{ ocp_dr_trident_first_rosa_cidr | replace('/16', '/8') }}"
      rule_desc: Peering1
    - proto: tcp
      ports:
      - 11105
      cidr_ip: "{{ ocp_dr_trident_first_rosa_cidr | replace('/16', '/8') }}"
      rule_desc: Peering2
    - proto: tcp
      ports:
      - 443
      cidr_ip: "{{ ocp_dr_trident_bastion_cidr }}"
      rule_desc: API

- name: Get data of first FsxN
  environment:
    AWS_REGION: "{{ trident_one.aws_default_region }}"
    AWS_ACCESS_KEY_ID: "{{ trident_one.aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ trident_one.aws_secret_access_key }}"
  ansible.builtin.command: >-
    aws fsx describe-file-systems --query 'FileSystems[0]'
  register: fsxn1

- name: Get data of second FsxN
  environment:
    AWS_REGION: "{{ trident_two.aws_default_region }}"
    AWS_ACCESS_KEY_ID: "{{ trident_two.aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ trident_two.aws_secret_access_key }}"
  ansible.builtin.command: >-
    aws fsx describe-file-systems --query 'FileSystems[0]'
  register: fsxn2

- name: Disable auto-backup of first FSxN
  environment:
    AWS_REGION: "{{ trident_one.aws_default_region }}"
    AWS_ACCESS_KEY_ID: "{{ trident_one.aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ trident_one.aws_secret_access_key }}"
  ansible.builtin.command: >-
    aws fsx update-file-system --file-system-id {{ (fsxn1.stdout | from_json).FileSystemId }} --ontap-configuration AutomaticBackupRetentionDays=0

- name: Disable auto-backup of second FSxN
  environment:
    AWS_REGION: "{{ trident_two.aws_default_region }}"
    AWS_ACCESS_KEY_ID: "{{ trident_two.aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ trident_two.aws_secret_access_key }}"
  ansible.builtin.command: >-
    aws fsx update-file-system --file-system-id {{ (fsxn2.stdout | from_json).FileSystemId }} --ontap-configuration AutomaticBackupRetentionDays=0

- name: Get mgmt IP of prod SVM
  environment:
    AWS_REGION: "{{ trident_one.aws_default_region }}"
    AWS_ACCESS_KEY_ID: "{{ trident_one.aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ trident_one.aws_secret_access_key }}"
  ansible.builtin.command: >-
    aws fsx describe-storage-virtual-machines --query "StorageVirtualMachines[?Name=='{{ ocp_dr_trident_fsx_storage_vm_name1 }}']"
  register: prod_svm

- name: Deploy Trident via OperatorHub onto prod cluster
  block:
  - name: Get OpenShift access token
    community.okd.openshift_auth:
      host: "{{ trident_one.rosa_openshift_api_url }}"
      username: "{{ trident_one.rosa_openshift_admin_user }}"
      password: "{{ trident_one.rosa_openshift_admin_password }}"
      validate_certs: false
    register: openshift_auth_results
    retries: 60
    delay: 30
    until:
    - openshift_auth_results is defined
    - openshift_auth_results.k8s_auth is defined
    - openshift_auth_results.k8s_auth.api_key is defined

  - name: Deploy Trident Operator
    kubernetes.core.k8s:
      host: "{{ trident_one.rosa_openshift_api_url }}"
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      state: present
      definition:
        apiVersion: operators.coreos.com/v1alpha1
        kind: Subscription
        metadata:
          name: trident-operator
          namespace: openshift-operators
        spec:
          channel: stable
          name: trident-operator
          source: certified-operators
          sourceNamespace: openshift-marketplace
          startingCSV: "{{ ocp_dr_trident_starting_csv }}"

  - name: Wait for Trident Operator to be up and running
    kubernetes.core.k8s_info:
      host: "{{ trident_one.rosa_openshift_api_url }}"
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      kind: Pod
      namespace: openshift-operators
      label_selectors:
      - app=operator.trident.netapp.io
    register: kubectl_get_trident_pod
    until: kubectl_get_trident_pod | json_query('resources[*].status.phase') | unique == ["Running"]
    retries: 30
    delay: 20

  - name: Deploy Trident Orchestrator
    kubernetes.core.k8s:
      host: "{{ trident_one.rosa_openshift_api_url }}"
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      state: present
      definition:
        apiVersion: trident.netapp.io/v1
        kind: TridentOrchestrator
        metadata:
          name: trident
          namespace: openshift-operators
        spec:
          IPv6: false
          debug: false
          nodePrep: [iscsi]
          imagePullSecrets: []
          imageRegistry: ''
          k8sTimeout: 30
          kubeletDir: /var/lib/kubelet
          namespace: trident
          silenceAutosupport: false

  - name: Wait for Trident Controller to be up and running
    kubernetes.core.k8s_info:
      host: "{{ trident_one.rosa_openshift_api_url }}"
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      kind: Pod
      namespace: trident
      label_selectors:
      - app=controller.csi.trident.netapp.io
    register: kubectl_get_trident_controller
    until: kubectl_get_trident_controller | json_query('resources[*].status.phase') | unique == ["Running"]
    retries: 30
    delay: 20

  - name: Create Secret for FSxN backends
    kubernetes.core.k8s:
      host: "{{ trident_one.rosa_openshift_api_url }}"
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      state: present
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: prod-backend-fsxn-secret
          namespace: trident
        type: Opaque
        stringData:
          username: vsadmin
          # password: "{{ _ocp_dr_trident_svm_admin_password }}"
          password: "{{ lookup('agnosticd_user_data', 'svm_admin_password') }}"

  - name: Create Trident Backend for NFS
    kubernetes.core.k8s:
      host: "{{ trident_one.rosa_openshift_api_url }}"
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      state: present
      definition:
        apiVersion: trident.netapp.io/v1
        kind: TridentBackendConfig
        metadata:
          name: prod-backend-fsxn-nfs
          namespace: trident
        spec:
          version: 1
          backendName: prod-fsxn-nfs
          storageDriverName: ontap-nas
          managementLIF: "{{ (prod_svm.stdout | from_json)[0].Endpoints.Management.IpAddresses[0] }}"
          nasType: nfs
          storagePrefix: prod
          credentials:
            name: prod-backend-fsxn-secret

  - name: Create Trident Backend for iSCSI
    kubernetes.core.k8s:
      host: "{{ trident_one.rosa_openshift_api_url }}"
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      state: present
      definition:
        apiVersion: trident.netapp.io/v1
        kind: TridentBackendConfig
        metadata:
          name: prod-backend-fsxn-iscsi
          namespace: trident
        spec:
          version: 1
          backendName: prod-fsxn-iscsi
          storageDriverName: ontap-san
          managementLIF: "{{ (prod_svm.stdout | from_json)[0].Endpoints.Management.IpAddresses[0] }}"
          sanType: iscsi
          storagePrefix: prod
          credentials:
            name: prod-backend-fsxn-secret

  - name: Create Storage Class for iSCSI
    kubernetes.core.k8s:
      host: "{{ trident_one.rosa_openshift_api_url }}"
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      state: present
      definition:
        apiVersion: storage.k8s.io/v1
        kind: StorageClass
        metadata:
          name: storage-class-iscsi
          annotations:
            storageclass.kubevirt.io/is-default-virt-class: 'true'
        provisioner: csi.trident.netapp.io
        parameters:
          backendType: "ontap-san"
          sanType: "iscsi"
        mountOptions:
        - discard
        allowVolumeExpansion: true

  - name: Create Storage Class for NFS
    kubernetes.core.k8s:
      host: "{{ trident_one.rosa_openshift_api_url }}"
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      state: present
      definition:
        apiVersion: storage.k8s.io/v1
        kind: StorageClass
        metadata:
          name: storage-class-nfs
        provisioner: csi.trident.netapp.io
        parameters:
          backendType: "ontap-nas"
          nasType: "nfs"
        allowVolumeExpansion: true

  - name: Create VolumeSnapshotClass
    kubernetes.core.k8s:
      host: "{{ trident_one.rosa_openshift_api_url }}"
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      state: present
      definition:
        apiVersion: snapshot.storage.k8s.io/v1
        kind: VolumeSnapshotClass
        metadata:
          name: csi-trident-vsc
        driver: csi.trident.netapp.io
        deletionPolicy: Delete

  - name: Create Namespace for Trident protect
    kubernetes.core.k8s:
      host: "{{ trident_one.rosa_openshift_api_url }}"
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      state: present
      definition:
        apiVersion: v1
        kind: Namespace
        metadata:
          name: trident-protect

  - name: Add Trident protect Helm repo
    kubernetes.core.helm_repository:
      host: "{{ trident_one.rosa_openshift_api_url }}"
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      name: netapp-trident-protect
      repo_url: "https://netapp.github.io/trident-protect-helm-chart/"

#  Trident Protect install in 25.06
# helm repo add netapp-trident-protect https://netapp.github.io/trident-protect-helm-chart
# helm install trident-protect netapp-trident-protect/trident-protect --set clusterName=<name-of-cluster> --version 100.2506.0 --create-namespace --namespace trident-protect

  - name: Deploy Trident protect Helm chart
    kubernetes.core.helm:
      host: "{{ trident_one.rosa_openshift_api_url }}"
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      name: trident-protect
      chart_ref: netapp-trident-protect/trident-protect
      chart_version: "{{ ocp_dr_trident_helm_chart_version }}"
      release_namespace: trident-protect
      values:
        clusterName=prod

  - name: Wait for Trident protect controller manager to be available
    kubernetes.core.k8s_info:
      host: "{{ trident_one.rosa_openshift_api_url }}"
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      kind: Pod
      namespace: trident-protect
      label_selectors:
      - app=controller.protect.trident.netapp.io
    register: kubectl_get_trident_protect_controller
    until: kubectl_get_trident_protect_controller | json_query('resources[*].status.phase') | unique == ["Running"]
    retries: 30
    delay: 20

  - name: Create Secret for Appvault bucket
    kubernetes.core.k8s:
      host: "{{ trident_one.rosa_openshift_api_url }}"
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      state: present
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: aws-s3-keys
          namespace: trident-protect
        type: Opaque
        data:
          accessKeyID: "{{ trident_one.aws_access_key_id | b64encode }}"
          secretAccessKey: "{{ trident_one.aws_secret_access_key | b64encode }}"

  - name: Create Secret for Kopia encryption
    kubernetes.core.k8s:
      host: "{{ trident_one.rosa_openshift_api_url }}"
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      state: present
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: appvault-secret
          namespace: trident-protect
        type: Opaque
        data:
          KOPIA_PASSWORD: "{{ 'mypassword' | b64encode }}"

  - name: Create Appvault
    kubernetes.core.k8s:
      host: "{{ trident_one.rosa_openshift_api_url }}"
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      state: present
      definition:
        apiVersion: protect.trident.netapp.io/v1
        kind: AppVault
        metadata:
          name: lab-vault
          namespace: trident-protect
        spec:
          dataMoverPasswordSecretRef: appvault-secret
          providerType: AWS
          providerConfig:
            s3:
              bucketName: "{{ ocp_dr_trident_s3_bucket_name }}"
              endpoint: "s3.{{ trident_one.aws_default_region }}.amazonaws.com"
          providerCredentials:
            accessKeyID:
              valueFromSecret:
                key: accessKeyID
                name: aws-s3-keys
            secretAccessKey:
              valueFromSecret:
                key: secretAccessKey
                name: aws-s3-keys

  always:
  - name: If login succeeded, try to log out (revoke access token)
    when: openshift_auth_results.openshift_auth.api_key is defined
    community.okd.openshift_auth:
      host: "{{ trident_one.rosa_openshift_api_url }}"
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      state: absent

# WARNING - need the user_data from previous file

- name: Create FSxN cluster peering Prod --> DR
  delegate_to: trident_bastion
  ansible.builtin.uri:
    url: https://{{ (fsxn1.stdout | from_json).OntapConfiguration.Endpoints.Management.IpAddresses[0] }}/api/cluster/peers/
    user: fsxadmin
    password: "{{ lookup('agnosticd_user_data', 'fsx_admin_password') }}"
    method: POST
    body:
      initial_allowed_svms: ["*"]
      remote:
        ip_addresses: ["{{ (fsxn2.stdout | from_json).OntapConfiguration.Endpoints.Intercluster.IpAddresses[0] }}"]
      authentication:
        passphrase: "Netapp01"
    status_code: 201, 409
    body_format: json
    validate_certs: false

# Create FSxN cluster peering DR --> Prod (accepts the peering from the other side).
#   Status code is 201 when successful, 409 in case this is run again
- name: Create FSxN cluster peering DR --> Prod (accepts the peering from the other side)
  delegate_to: trident_bastion
  ansible.builtin.uri:
    url: https://{{ (fsxn2.stdout | from_json).OntapConfiguration.Endpoints.Management.IpAddresses[0] }}/api/cluster/peers/
    user: fsxadmin
    password: "{{ lookup('agnosticd_user_data', 'fsx_admin_password') }}"
    method: POST
    body:
      initial_allowed_svms: ["*"]
      remote:
        ip_addresses: ["{{ (fsxn1.stdout | from_json).OntapConfiguration.Endpoints.Intercluster.IpAddresses[0] }}"]
      authentication:
        passphrase: "Netapp01"
    status_code: 201, 409
    body_format: json
    validate_certs: false

- name: Create SVM peering
  delegate_to: trident_bastion
  ansible.builtin.uri:
    url: https://{{ (fsxn2.stdout | from_json).OntapConfiguration.Endpoints.Management.IpAddresses[0] }}/api/svm/peers/
    user: fsxadmin
    password: "{{ lookup('agnosticd_user_data', 'fsx_admin_password') }}"
    method: POST
    body:
      svm:
        name: "{{ lookup('agnosticd_user_data', 'fsxontap_storagevm_name2') }}"
      peer:
        svm:
          name: "{{ lookup('agnosticd_user_data', 'fsxontap_storagevm_name1') }}"
        cluster:
          name: FsxId{{ (fsxn1.stdout | from_json).FileSystemId | replace('fs-', '') }}
      applications: ["snapmirror"]
    status_code: 201, 202
    body_format: json
    validate_certs: false
