---
- name: Set hosted cluster console URL
  ansible.builtin.set_fact:
    _hcp_console_url: >-
      https://console-openshift-console.apps.hcp-{{ guid }}.{{ cluster_dns_zone }}

- name: Generate admin user password
  when: hcp_admin_password | default("") | length == 0
  ansible.builtin.set_fact:
    _hcp_admin_password: >-
      {{ lookup('password', '/dev/null chars=ascii_letters,digits '
          ~ 'length=' ~ hcp_admin_password_length
      ) }}

- name: Set admin user password
  when: hcp_admin_password | default("") | length > 0
  ansible.builtin.set_fact:
    _hcp_admin_password: "{{ hcp_admin_password }}"

- name: Set up randomized user password array
  when: hcp_user_password | default("") | length == 0
  ansible.builtin.set_fact:
    hcp_user_passwords: >-
      {{ hcp_user_passwords + [ lookup('password',
        '/dev/null chars=ascii_letters,digits '
        ~ 'length=' ~ hcp_user_password_length ) ] }}
  loop: "{{ range(0, num_users, 1) | list }}"

- name: Set up user password array
  when: hcp_user_password | default("") | length > 0
  ansible.builtin.set_fact:
    hcp_user_passwords: "{{ hcp_user_passwords + [hcp_user_password] }}"
  loop: "{{ range(0, num_users, 1) | list }}"

- name: Create temporary htpasswd file
  ansible.builtin.tempfile:
    state: file
    suffix: htpasswd
  register: r_htpasswd

- name: Add admin user to htpasswd file
  ansible.builtin.command: >-
    /usr/bin/htpasswd -b {{ r_htpasswd.path }}
    {{ hcp_admin_user }}
    {{ _hcp_admin_password }}
  changed_when: true

- name: Add users and passwords to htpasswd file
  ansible.builtin.command: >-
    htpasswd -b {{ r_htpasswd.path }}
    {{ hcp_user_base }}{{ item + 1 }}
    {{ hcp_user_passwords[item] }}
  loop: "{{ range(0, num_users, 1) | list }}"
  changed_when: true

- name: Read contents of htpasswd file
  ansible.builtin.slurp:
    src: "{{ r_htpasswd.path }}"
  register: r_htpasswd_file

- name: Remove generated htpasswd file
  ansible.builtin.file:
    path: "{{ r_htpasswd.path }}"
    state: absent

- name: Ensure htpasswd secret is absent
  kubernetes.core.k8s:
    state: absent
    api_version: v1
    kind: Secret
    name: "htpasswd-{{ guid }}"
    namespace: "{{ sandbox_hcp.sandbox_openshift_namespace }}"
  register: r_htpasswd_secret_absent
  retries: 5
  delay: 10
  until: r_htpasswd_secret_absent is success

- name: Create secret htpasswd-{{ guid }}
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'secret-htpasswd.yaml') | from_yaml }}"
  vars:
    namespace: "{{ sandbox_hcp.sandbox_openshift_namespace }}"

- name: Print user information messages
  when: hcp_enable_user_info_messages | bool
  block:
    - name: Print common user information messages
      agnosticd_user_info:
        msg: >-
          Authentication via htpasswd is enabled on this cluster.


          User `{{ hcp_admin_user }}`
          with password `{{ _hcp_admin_password }}`
          is cluster admin.

    - name: Print user information for common password
      when:
        - num_users | int > 0
        - hcp_user_password | default("") | length > 0
      agnosticd_user_info:
        msg: >-
          {%- if num_users | int == 1 -%}
          Normal user `user1`
          created with password `{{ hcp_user_password }}`
          {%- else -%}
          Users `{{ hcp_user_base }}1` ..
          `{{ hcp_user_base ~ num_users }}`
          created with password `{{ hcp_user_password }}`
          {%- endif -%}

    - name: Print user information for randomized password
      when:
        - num_users | int > 0
        - hcp_user_password | default("") | length == 0
      agnosticd_user_info:
        msg: >-
          {%- if num_users  | int== 1 -%}
          Normal user `user1`
          created with password `{{ hcp_user_passwords[0] }}`
          {%- else -%}
          User `{{ hcp_user_base }}{{ n + 1 }}`,
          Password: `{{ hcp_user_passwords[n] }}`
          {%- endif -%}
      loop: "{{ range(0, num_users | int) | list }}"
      loop_control:
        loop_var: n

- name: Save admin user information
  agnosticd_user_info:
    data:
      openshift_cluster_admin_username: "{{ hcp_admin_user }}"
      openshift_cluster_admin_password: "{{ _hcp_admin_password }}"
      openshift_cluster_num_users: "{{ num_users }}"
      openshift_cluster_user_base: "{{ hcp_user_base }}"
      openshift_cluster_user_password: "{{ hcp_user_passwords[0] | default(hcp_user_password) }}"
      console_url: "{{ _hcp_console_url }}"
      openshift_cluster_console_url: "{{ _hcp_console_url }}"
      openshift_console_url: "{{ _hcp_console_url }}"
      openshift_cluster_ingress_domain: "apps.hcp-{{ guid }}.{{ cluster_dns_zone }}"


- name: Save user information
  when: hcp_enable_user_info_data | bool
  block:
    - name: Save user information for user access
      agnosticd_user_info:
        user: "{{ hcp_user_base }}{{ n + 1 }}"
        data:
          user: "{{ hcp_user_base }}{{ n + 1 }}"
          password: "{{ hcp_user_passwords[ n ] }}"
          openshift_cluster_user_name: "{{ hcp_user_base }}{{ n + 1 }}"
          openshift_cluster_user_password: "{{ hcp_user_passwords[ n ] }}"
          console_url: "{{ _hcp_console_url }}"
          openshift_cluster_console_url: "{{ _hcp_console_url }}"
          openshift_console_url: "{{ _hcp_console_url }}"
          openshift_cluster_ingress_domain: "apps.hcp-{{ guid }}.{{ cluster_dns_zone }}"
      loop: "{{ range(0, num_users | int) | list }}"
      loop_control:
        loop_var: n
