#!/bin/bash

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

echo "********************************************************"
echo "AgnosticD V2 Setup"
echo "********************************************************"
echo

echo "Check if the setup is run from the correct directory..."
# Check if we are inside the agnosticd-v2 directory
if [ "$(basename "$PWD")" != "agnosticd-v2" ]; then
    echo "  Error: This script must be run from within the agnosticd-v2 directory."
    exit 1
fi

echo
echo "********************************************************"
echo "Check if podman is installed..."
# Check if Podman is installed
if ! command_exists podman; then
    echo "  Error: Podman must be installed"
    exit 1
fi

# Directories to check and create if they don't exist
directories=("../agnosticd-v2-output" "../agnosticd-v2-secrets" "../agnosticd-v2-vars")

echo
echo "*****************************************************************"
echo "Check if directories exist. Create and seed them if they don't..."
# Check if directories exist, create if they don't
for dir in "${directories[@]}"; do
    if [ ! -d "$dir" ]; then
        echo "  Directory $dir does not exist. Creating it..."
        mkdir -p "$dir"
        
        # Copy template files if necessary
        if [ "$dir" == "../agnosticd-v2-secrets" ]; then
            cp tools/deployer_scripts/templates/secrets.yml "$dir" 2>&1 >/dev/null
            cp tools/deployer_scripts/templates/secrets-sandboxXXX.yml "$dir" 2>&1 >/dev/null
            echo "  Copied template files to $dir"
        elif [ "$dir" == "../agnosticd-v2-vars" ]; then
            cp tools/deployer_scripts/templates/openshift-cluster.yml "$dir" 2>&1 >/dev/null
            echo "  Copied template file to $dir"
        fi
    fi
done

echo
echo "*****************************************************************"
echo "Check if VirtualEnv is set up correctly. Set it up if not..."
# Check if running in a Python virtual environment
VENV_DIR="../agnosticd-v2-virtualenv"
if [ -z "$VIRTUAL_ENV" ]; then
    echo "  Not running in a virtual environment. Checking for Python 3.11..."
    
    if command_exists python3.11; then
        if [ -d "$VENV_DIR" ]; then
            echo "  Virtual environment already exists. Activating it..."
        else
            echo "  Creating new virtual environment..."
            python3.11 -m venv "$VENV_DIR" 2>&1 >/dev/null
        fi
        source "$VENV_DIR/bin/activate"
    else
        echo "  Error: Python 3.11 must be installed"
        exit 1
    fi
else
    echo "  Running in a virtual environment."
fi

echo
echo "*****************************************************************"
echo "Check if software is installed in the virtual env..."
# Update pip and install ansible-navigator
echo "  Updating pip and installing ansible-navigator..."
pip install --upgrade pip 2>&1 >/dev/null
pip install ansible-navigator 2>&1 >/dev/null

echo
echo "*****************************************************************"
echo "Setup complete."
echo "*****************************************************************"
echo
