---
- name: Set default interfaces/networks variables
  ansible.builtin.set_fact:
    _instance_interfaces:
      - masquerade: {}
        model: virtio
        name: default
        macAddress: "{{ ai_control_plane_macs[_index | int-1] }}"
      - name: "{{ network }}"
        macAddress: "{{ ai_control_plane_macs2[_index | int-1] }}"
        bridge: {}
    _instance_networks:
      - name: default
        pod:
          vmNetworkCIDR: "{{ pod_network }}"
      - name: "{{ network }}"
        multus:
          networkName: "{{ network_name }}"

- name: Add attach control plane networks if defined
  vars:
    _network_name: "{{ _network.split('/')[1] if '/' in _network else _network + guid }}"
    _network_multusname: "{{ _network if '/' in _network else _network + guid }}"
  when: ai_attach_control_plane_networks | default([]) | length > 0
  ansible.builtin.set_fact:
    _instance_interfaces: >-
      {{
        _instance_interfaces + [{
          'name': _network_name,
          'bridge': {},
          'model': 'virtio',
          'macAddress': ai_attach_control_plane_macs[_network][_index | int-1]
        } ]
      }}
    _instance_networks: >-
      {{ _instance_networks + [
          {
              'name': _network_name,
              'multus': {'networkName': _network_multusname}
          }] }}
  loop: "{{ ai_attach_control_plane_networks }}"
  loop_control:
    loop_var: _network

- name: Set default volumes/disks variables
  ansible.builtin.set_fact:
    _instance_volumes:
      - dataVolume:
          name: "{{ vmname }}"
        name: rootdisk
      - dataVolume:
          name: "{{ vmname }}-installation-cdrom"
        name: installation-cdrom
      - dataVolume:
          name: "{{ vmname }}-etcd"
        name: etcd
    _instance_disks:
      - bootOrder: 1
        disk:
          bus: virtio
        name: rootdisk
      - bootOrder: 3
        disk:
          bus: virtio
        name: etcd
      - bootOrder: 2
        cdrom:
          bus: sata
        name: installation-cdrom

- name: Set the instances disks
  ansible.builtin.set_fact:
    _instance_disks: "{{ _instance_disks | from_yaml + [
    {
        'name': _disk.metadata.name,
        'disk': {'bus': _instance.disk_type | default('virtio')}
    }
    ] }}"
    _instance_volumes: "{{ _instance_volumes | from_yaml + [
        {
            'name': _disk.metadata.name,
            'dataVolume': {'name': _disk.metadata.name}
        }
    ] }}"
  loop: "{{ ai_control_plane_extra_disks | default([]) | list }}"
  loop_control:
    loop_var: _disk

- name: Create control plane virtual machine
  kubevirt.core.kubevirt_vm:
    api_version: kubevirt.io/v1
    host: "{{ sandbox_openshift_api_url }}"
    api_key: "{{ k8s_auth_results.k8s_auth.api_key | default(sandbox_openshift_api_key) }}"
    validate_certs: false
    name: "{{ vmname }}"
    namespace: "{{ namespace }}"
    data_volume_templates: "{{ _datavolume + (ai_control_plane_extra_disks | default([]) | to_json | replace('INSTANCENAME', vmname) | from_json ) }}"
    running: true
    wait: false
    annotations:
      vm.kubevirt.io/os: rhel8
    labels:
      kubevirt.io/domain: "{{ vmname }}"
      role: control-plane
    spec: "{{ _spec | from_yaml }}"
  vars:
    _datavolume:
      - metadata:
          name: "{{ vmname }}-installation-cdrom"
        spec:
          source:
            pvc:
              name: "{{ pvcinstall }}"
              namespace: "{{ namespace }}"
          storage:
            resources:
              requests:
                storage: 1Gi
      - metadata:
          name: "{{ vmname }}"
        spec:
          preallocation: false
          source:
            blank: {}
          storage:
            resources:
              requests:
                storage: 100Gi
            storageClassName: "{{ storageclass }}"
      - metadata:
          name: "{{ vmname }}-etcd"
        spec:
          preallocation: false
          source:
            blank: {}
          storage:
            resources:
              requests:
                storage: 30Gi
            storageClassName: "{{ ai_local_storageclass }}"
            volumeMode: Filesystem
    _spec: |
      domain:
        cpu:
          cores: {{ ai_control_plane_cores | int }}
          sockets: 1
          threads: 1
          model: host-passthrough
        devices:
          disks: {{ _instance_disks | replace('INSTANCENAME', vmname) }}
          interfaces: {{ _instance_interfaces }}
          networkInterfaceMultiqueue: true
        machine:
          type: pc-q35-rhel8.6.0
        resources:
          requests:
            memory: "{{ ai_control_plane_memory }}"
          limits:
            memory: "{{ ai_control_plane_memory }}"
      readinessProbe:
        httpGet:
          path: /healthz
          port: 6443
          scheme: HTTPS
        initialDelaySeconds: 120
        periodSeconds: 1
      networks: {{ _instance_networks }}
      terminationGracePeriodSeconds: 180
      evictionStrategy: None
      volumes: {{ _instance_volumes | replace('INSTANCENAME', vmname) }}
