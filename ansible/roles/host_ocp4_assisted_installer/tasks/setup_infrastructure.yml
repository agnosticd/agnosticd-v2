---
- name: Generate mac addresses for control plane
  ansible.builtin.set_fact:
    ai_control_plane_macs: >
      {{ ai_control_plane_macs + ['f6' |
          community.general.random_mac(ai_ocp_namespace + cluster_name + 'm1' + _index|string)] }}
    ai_control_plane_macs2: >
      {{ ai_control_plane_macs2 + ['f6' |
          community.general.random_mac(ai_ocp_namespace + cluster_name + 'm2' + _index|string)] }}
  loop: "{{ range(1,control_plane_instance_count|int+1)|list }}"
  loop_control:
    loop_var: _index

- name: Generate MAC addresses for control plane for attached networks
  ansible.builtin.set_fact:
    ai_attach_control_plane_macs: >-
      {{
        ai_attach_control_plane_macs | combine({
          item.1: (ai_attach_control_plane_macs[item.1] | default([])) + [
            'f6' | community.general.random_mac(
              ai_ocp_namespace + cluster_name + item.0|string + item.1
            )
          ]
        })
      }}
  loop: "{{ range(1, control_plane_instance_count | int + 1) | list | product(ai_attach_control_plane_networks) | list }}"
  loop_control:
    loop_var: item

- name: Generate mac addresses for workers
  ansible.builtin.set_fact:
    ai_workers_macs: >
        {{ ai_workers_macs + ['f6' |
            community.general.random_mac(ai_ocp_namespace + cluster_name + 'w1' + _index|string)] }}
    ai_workers_macs2: >
        {{ ai_workers_macs2 + ['f6' |
            community.general.random_mac(ai_ocp_namespace + cluster_name + 'w2' + _index|string)] }}
  loop: "{{ range(1,worker_instance_count|int+1)|list }}"
  loop_control:
    loop_var: _index

- name: Generate MAC addresses for workers for attached networks
  ansible.builtin.set_fact:
    ai_attach_workers_macs: >-
      {{
        ai_attach_workers_macs | combine({
          item.1: (ai_attach_workers_macs[item.1] | default([])) + [
            'f6' | community.general.random_mac(
              ai_ocp_namespace + cluster_name + item.0|string + item.1
            )
          ]
        })
      }}
  loop: "{{ range(1, worker_instance_count | int + 1) | list | product(ai_attach_workers_networks) | list }}"
  loop_control:
    loop_var: item

- name: Set static_network_config variable
  ansible.builtin.set_fact:
    static_network_config: "{{ lookup('template','static_network_config_full.yaml.j2') | from_yaml }}"

- name: Create Infrastructure environment
  rhpds.assisted_installer.create_infra_env:
    name: "{{ cluster_name }}-infra-env"
    image_type: "{{ ai_cluster_iso_type }}"
    cluster_id: "{{ newcluster.result.id }}"
    openshift_version: "{{ ai_cluster_version }}"
    ssh_authorized_key: "{{ ai_ssh_authorized_key }}"
    offline_token: "{{ ai_offline_token }}"
    pull_secret: "{{ ai_pull_secret }}"
    static_network_config: "{{ static_network_config }}"
  register: newinfraenv

- name: Delete existing installation ISO DataVolume if it exists
  kubernetes.core.k8s:
    api_version: cdi.kubevirt.io/v1beta1
    kind: DataVolume
    name: installation-iso
    namespace: "{{ ai_ocp_namespace }}"
    state: absent
    wait: true
    wait_timeout: 120

- name: Create DataVolume for the installation ISO
  vars:
    image_url: "{{ newinfraenv.result.download_url }}"
  kubernetes.core.k8s:
    template: installation_iso.yaml.j2
    wait: true
    wait_timeout: 300

- name: Create three control plane VMs for full cluster
  vars:
    vmname: "{{ ai_ocp_vmname_control_plane_prefix }}-{{ _index }}"
    network: "{{ cluster_name }}-openshift"
    network_name: "{{ ai_install_use_network | default(cluster_name + '-openshift') }}"
    pod_network: "192.168.{{ _index }}.0/24"
  ansible.builtin.include_tasks: kubevirt/create_control_plane_etcd.yaml
  loop: "{{ range(1,control_plane_instance_count | int+1) | list }}"
  loop_control:
    loop_var: _index

- name: Create {{ worker_instance_count }} worker VMs for full cluster
  vars:
    vmname: "{{ ai_ocp_vmname_worker_prefix }}-{{ _index }}"
    network: "{{ cluster_name}}-openshift"
    network_name: "{{ ai_install_use_network | default(cluster_name + '-openshift') }}"
    pod_network: "192.168.1{{ _index }}.0/24"
  ansible.builtin.include_tasks: kubevirt/create_workers.yaml
  loop: "{{ range(1,worker_instance_count | int+1) | list }}"
  loop_control:
    loop_var: _index

- name: Wait for three control plane VMs to be running
  vars:
    vmname: "{{ ai_ocp_vmname_control_plane_prefix }}-{{ _index }}"
  ansible.builtin.include_tasks: kubevirt/wait_control_plane_etcd.yaml
  loop: "{{ range(1,control_plane_instance_count | int+1) | list }}"
  loop_control:
    loop_var: _index

- name: Wait for {{ worker_instance_count }} worker VMs to be running
  vars:
    vmname: "{{ ai_ocp_vmname_worker_prefix }}-{{ _index }}"
  ansible.builtin.include_tasks: kubevirt/wait_workers.yaml
  loop: "{{ range(1,worker_instance_count | int+1) | list }}"
  loop_control:
    loop_var: _index

# Don't change role - AI collection won't find the node if the role is not 'master'
- name: Set the variable ai_configure_hosts for control-plane
  ansible.builtin.set_fact:
    ai_configure_hosts: >-
      {{ ai_configure_hosts + [
        {'hostname': ai_ocp_vmname_control_plane_prefix + "-" + _index|string,
      'role': 'master',
      'installation_disk': '/dev/vda'}] }}
  loop: "{{ range(1,control_plane_instance_count | int+1) | list }}"
  loop_control:
    loop_var: _index

- name: Set the variable ai_configure_hosts for workers
  ansible.builtin.set_fact:
    ai_configure_hosts: >-
      {{ ai_configure_hosts + [
      {'hostname': ai_ocp_vmname_worker_prefix + "-" + _index|string,
      'role': 'worker',
      'installation_disk': '/dev/vda'}] }}
  loop: "{{ range(1,worker_instance_count | int+1) | list }}"
  loop_control:
    loop_var: _index

- name: Wait for the hosts to be ready
  rhpds.assisted_installer.wait_for_hosts:
    cluster_id: "{{ newcluster.result.id }}"
    offline_token: "{{ ai_offline_token }}"
    expected_hosts: "{{ control_plane_instance_count | int + worker_instance_count | int }}"
    infra_env_id: "{{ newinfraenv.result.id }}"
    configure_hosts: "{{ ai_configure_hosts }}"
    wait_timeout: 600
