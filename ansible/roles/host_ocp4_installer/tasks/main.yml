---
- name: Assert OpenShift Versions
  ansible.builtin.assert:
    that:
    - host_ocp4_installer_version is version_compare('4.18', '>=')
    fail_msg: "OpenShift version must be 4.18 or higher"

- name: Install client and OpenShift Installer binaries
  ansible.builtin.include_tasks: install_installer.yml

- name: Run the installation
  when: host_ocp4_installer_install_openshift | bool
  block:
  - name: Enable FIPS mode on host
    when: host_ocp4_installer_fips_enable | default(false) | bool
    ansible.builtin.include_tasks: setup_fips_host.yml

  - name: Generate install_config.yaml
    ansible.builtin.include_tasks: generate_install_config.yml

  - name: Installation and getting the logs
    # become: false
    block:
    - name: Create openshift-install manifests
      ansible.builtin.include_tasks: create_manifests.yml

    # Need to split the command and the poll to run the poll on the bastion instead of localhost since this whole role is delegated to the bastion
    - name: Run the installer
      ansible.builtin.command: openshift-install create cluster --dir=/home/{{ ansible_user }}/{{ cluster_name }}
      async: "{{ 2 * 60 * 60 }}"
      poll: 0
      register: r_openshift_install

    - name: Check installer status
      ansible.builtin.async_status:
        jid: "{{ r_openshift_install.ansible_job_id }}"
      register: r_install_job_result
      until: r_install_job_result.finished
      retries: 300
      delay: 15

    rescue:
    - name: Run destroy to reset before retry
      ansible.builtin.command: openshift-install destroy cluster --dir=/home/{{ ansible_user }}/{{ cluster_name }}

    - name: Pause briefly for cloud provider cleanup to finish
      ansible.builtin.pause:
        minutes: 2

    - name: Restore install config from backup copy
      ansible.builtin.copy:
        remote_src: true
        src: /home/{{ ansible_user }}/{{ cluster_name }}/install-config.yaml.bak
        dest: /home/{{ ansible_user }}/{{ cluster_name }}/install-config.yaml
        owner: "{{ ansible_user }}"
        mode: ug=rw,o=

    - name: Recreate openshift-install manifests
      ansible.builtin.include_tasks: create_manifests.yml

    - name: Retry the installer
      ansible.builtin.command: openshift-install create cluster --dir=/home/{{ ansible_user }}/{{ cluster_name }}
      async: "{{ 2 * 60 * 60 }}"
      poll: 0
      register: r_openshift_install

    - name: Check installer status again
      ansible.builtin.async_status:
        jid: "{{ r_openshift_install.ansible_job_id }}"
      register: r_install_job_result
      until: r_install_job_result.finished
      retries: 300
      delay: 15

    always:
    - name: Gzip Install log
      ansible.builtin.archive:
        path: /home/{{ ansible_user }}/{{ cluster_name }}/.openshift_install.log
        dest: /home/{{ ansible_user }}/{{ cluster_name }}/.openshift_install.log.gz
        format: gz
        mode: ug=rw,o=r

    - name: Get Install log
      ansible.builtin.fetch:
        src: /home/{{ ansible_user }}/{{ cluster_name }}/.openshift_install.log.gz
        dest: "{{ output_dir }}/{{ config }}_{{ guid }}_log/"
        flat: true

    - name: Save output_dir archive
      when: agnosticd_save_output_dir_archive is defined
      ansible.builtin.include_role:
        name: agnosticd_save_output_dir

- name: Fetch kube config
  ansible.builtin.fetch:
    flat: true
    src: /home/{{ ansible_user }}/{{ cluster_name }}/auth/{{ item }}
    dest: "{{ hostvars.localhost.output_dir }}/{{ config }}_{{ guid }}_{{ item }}"
  loop:
  - kubeconfig
  - kubeadmin-password

- name: Make sure .kube directory exists for {{ ansible_user }}
  ansible.builtin.file:
    state: directory
    path: /home/{{ ansible_user }}/.kube
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: u=rwx,go=

- name: Make sure .kube directory exists for root
  become: true
  ansible.builtin.file:
    state: directory
    path: /root/.kube
    owner: root
    group: root
    mode: u=rwx,go=

- name: Copy cluster kubeconfig to /home/{{ ansible_user }}
  ansible.builtin.copy:
    remote_src: true
    src: "/home/{{ ansible_user }}/{{ cluster_name }}/auth/kubeconfig"
    dest: "/home/{{ ansible_user }}/.kube/config"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: u=rw,go=

- name: Copy cluster kubeconfig to /root/.kube/config
  become: true
  ansible.builtin.copy:
    remote_src: true
    src: /home/{{ ansible_user }}/{{ cluster_name }}/auth/kubeconfig
    dest: /root/.kube/config
    owner: root
    group: root
    mode: u=rw,go=

- name: Set up Student User
  when: bastion_setup_student_user | bool
  become: true
  block:
  - name: Make sure .kube directory exists in /home/{{ bastion_student_user_name }}
    ansible.builtin.file:
      state: directory
      path: "/home/{{ bastion_student_user_name }}/.kube"
      owner: "{{ bastion_student_user_name }}"
      group: users
      mode: u=rwx,go=

  - name: Copy kubeconfig to /home/{{ bastion_student_user_name }}
    ansible.builtin.copy:
      src: /home/{{ ansible_user }}/{{ cluster_name }}/auth/kubeconfig
      dest: /home/{{ bastion_student_user_name }}/.kube/config
      remote_src: true
      owner: "{{ bastion_student_user_name }}"
      group: users
      mode: u=rw,go=

- name: Create OpenShift Bash completion file
  become: true
  ansible.builtin.shell: oc completion bash >/etc/bash_completion.d/openshift
