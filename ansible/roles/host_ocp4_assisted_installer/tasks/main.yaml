---
- name: Set URLs for OpenShift GA releases (specific version)
  when: (host_ocp4_installer_version | string).split('.') | length >= 3
  ansible.builtin.set_fact:
    openshift_client_download_url: >-
      {{ '{0}/ocp/{1}/openshift-client-linux-{1}.tar.gz'.format(
        host_ocp4_installer_root_url | default("https://mirror.openshift.com/pub/openshift-v4/clients"),
        host_ocp4_installer_version
      ) }}

- name: Set URLs for OpenShift GA releases (latest stable)
  when: (host_ocp4_installer_version | string).split('.') | length == 2
  set_fact:
    openshift_client_download_url: >-
      {{ '{0}/ocp/stable-{1}/openshift-client-linux.tar.gz'.format(
        host_ocp4_installer_root_url | default("https://mirror.openshift.com/pub/openshift-v4/clients"),
        host_ocp4_installer_version
      ) }}

- name: Install the OpenShift CLI on the bastion
  delegate_to: "{{ groups['bastions'][0] }}"
  become: true
  ansible.builtin.unarchive:
    remote_src: true
    src: "{{ openshift_client_download_url }}"
    dest: /usr/bin
    mode: ug=rwx,o=rx
    owner: root
    group: root
  register: r_client
  until: r_client is success
  retries: 10
  delay: 30

- name: Log in (obtain access token)
  when: sandbox_openshift_username | default("") | length > 0
  community.okd.openshift_auth:
    username: "{{ sandbox_openshift_username }}"
    password: "{{ sandbox_openshift_password }}"
    host: "{{ sandbox_openshift_api_url }}"
  register: k8s_auth_results

- name: Install OpenShift using Assisted Installer
  module_defaults:
    group/k8s:
      host: "{{ sandbox_openshift_api_url }}"
      api_key: "{{ k8s_auth_results.k8s_auth.api_key | default(sandbox_openshift_api_key) }}"
      validate_certs: false
  block:
  - name: Configure a SNO cluster
    when: worker_instance_count | int == 0
    ansible.builtin.include_tasks: configure_sno_cluster.yml

  - name: Configure a full cluster
    when: worker_instance_count | int > 0
    ansible.builtin.include_tasks: configure_full_cluster.yml

  - name: Create OVN secondary network
    when: ai_install_use_network is not defined
    vars:
      network_name: "{{ cluster_name }}-openshift"
    kubernetes.core.k8s:
      template: net_attach_def.yaml.j2
      wait: true
      wait_timeout: 300

  - name: Create OpenShift cluster using Assisted Installer
    rhpds.assisted_installer.create_cluster:
      name: "{{ cluster_name }}"
      openshift_version: "{{ ai_cluster_version }}"
      base_dns_domain: "{{ cluster_dns_zone }}"
      offline_token: "{{ ai_offline_token }}"
      pull_secret: "{{ ai_pull_secret }}"
      high_availability_mode: "{{ 'Full' if control_plane_instance_count | int > 1 else 'None' }}"
      schedulable_masters: false
      olm_operators: []
      service_networks:
      - cidr: "{{ ai_service_network_cidr }}"
      machine_networks:
      - cidr: "{{ ai_network_prefix }}.0/24"
      cluster_networks:
      - cidr: "{{ ai_cluster_network_cidr }}"
        host_prefix: 23
      api_vips:
      - ip: "{{ ai_network_prefix }}.100"
      ingress_vips:
      - ip: "{{ ai_network_prefix }}.101"
    register: newcluster

  - name: Add etcd manifest
    rhpds.assisted_installer.create_manifest:
      cluster_id: "{{ newcluster.result.id }}"
      offline_token: "{{ ai_offline_token }}"
      content: "{{lookup('ansible.builtin.file', 'etcd_disk.yaml') | b64encode }}"
      file_name: 10-control-plane-etcd-config.yaml
      folder: openshift

  - name: Add routers replicas manifest
    rhpds.assisted_installer.create_manifest:
      cluster_id: "{{ newcluster.result.id }}"
      offline_token: "{{ ai_offline_token }}"
      content: "{{lookup('ansible.builtin.template', 'router_replicas.yaml.j2') | b64encode }}"
      file_name: 99_router-replicas.yaml
      folder: openshift

  - name: Add OVN-Kubernetes to switch to local gateway mode manifest
    rhpds.assisted_installer.create_manifest:
      cluster_id: "{{ newcluster.result.id }}"
      offline_token: "{{ ai_offline_token }}"
      content: "{{lookup('ansible.builtin.file', 'network_config.yaml') | b64encode }}"
      file_name: cluster-network-03-config.yml
      folder: openshift

  - name: Enable ip_forwarding for control plane
    rhpds.assisted_installer.create_manifest:
      cluster_id: "{{ newcluster.result.id }}"
      offline_token: "{{ ai_offline_token }}"
      content: "{{lookup('ansible.builtin.file', 'sysctl_control_plane.yaml') | b64encode }}"
      file_name: 98_sysctl-control-plane.yaml
      folder: openshift

  - name: Add MachineConfig manifests to Assisted Installer
    when: ai_machineconfigs | default([]) | length > 0
    rhpds.assisted_installer.create_manifest:
      cluster_id: "{{ newcluster.result.id }}"
      offline_token: "{{ ai_offline_token }}"
      content: "{{ item | to_yaml | b64encode }}"         # Convert MachineConfig to YAML string
      file_name: "{{ item.metadata.name }}.yaml"          # Use the MachineConfig name as filename
      folder: openshift                                   # Target folder in Assisted Installer
    loop: "{{ ai_machineconfigs }}"
    loop_control:
      label: "{{ item.metadata.name }}"                   # Clean logging output using the MachineConfig name

  - name: Setup infrastructure
    ansible.builtin.include_tasks: setup_infrastructure.yml

  - name: Run installation on the bastion
    delegate_to: "{{ groups['bastions'][0] }}"
    block:
    # Need to specify python interpreter for the async task - otherwise it will try to use the same version
    # as the one in the Execution Environment - which may or may not exist on the bastion.
    - name: Start cluster installation
      vars:
        ansible_python_interpreter: /usr/bin/python3
      rhpds.assisted_installer.install_cluster:
        cluster_id: "{{ newcluster.result.id }}"
        offline_token: "{{ ai_offline_token }}"
        wait_timeout: 5400
      async: 5400
      poll: 60
      register: cluster_install_job

    - name: Display cluster_install_job for debugging purpose
      ansible.builtin.debug:
        var: cluster_install_job
        verbosity: 2

    - name: Wait for cluster installation to be completed
      when:
      - not cluster_install_job.finished | default(false) | bool
      - not cluster_install_job.result.status | default('') | lower() == 'installed'
      - cluster_install_job.ansible_job_id is defined
      ansible.builtin.async_status:
        jid: "{{ cluster_install_job.ansible_job_id }}"
      register: cluster_install_result
      until: cluster_install_result.finished
      retries: 90
      delay: 60

    - name: Get OpenShift cluster credentials
      rhpds.assisted_installer.get_credentials:
        cluster_id: "{{ newcluster.result.id }}"
        offline_token: "{{ ai_offline_token }}"
      register: ai_credentials

    - name: Display credentials for debugging purpose
      ansible.builtin.debug:
        var: ai_credentials.result

    - name: Save credentials in variables
      ansible.builtin.set_fact:
        openshift_console_url: "{{ ai_credentials.result.console_url }}"
        openshift_kubeadmin_password: "{{ ai_credentials.result.password }}"

  - name: Downloads OpenShift cluster credentials
    rhpds.assisted_installer.download_credentials:
      cluster_id: "{{ newcluster.result.id }}"
      offline_token: "{{ ai_offline_token }}"
      file_name: "{{ item }}"
      dest: "{{ hostvars.localhost.output_dir }}/{{ config }}_{{ guid }}_{{ item }}"
    loop:
    - kubeadmin-password
    - kubeconfig
    - kubeconfig-noingress

  - name: Make directory to store cluster files
    ansible.builtin.file:
      state: directory
      path: "{{ hostvars.localhost.output_dir }}/cluster_files"
      mode: ug=rwx,o=rx
      recurse: true

  - name: Downloads OpenShift cluster files
    rhpds.assisted_installer.download_files:
      cluster_id: "{{ newcluster.result.id }}"
      offline_token: "{{ ai_offline_token }}"
      file_name: "{{ item }}"
      dest: "{{ hostvars.localhost.output_dir }}/cluster_files/{{ item }}"
    loop:
    - bootstrap.ign
    - master.ign
    - metadata.json
    - worker.ign
    - install-config.yaml
    - custom_manifests.json
    - custom_manifests.yaml

  - name: Set up bastion
    delegate_to: "{{ groups['bastions'][0] }}"
    become: true
    block:
    - name: Create directory for downloaded credential files
      ansible.builtin.file:
        state: directory
        path: "~{{ ansible_user }}/{{ cluster_name }}/auth"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: ug=rwx,o=rx
        recurse: true

    - name: Copy kube config and kubeadmin password to bastion
      ansible.builtin.copy:
        src: "{{ hostvars.localhost.output_dir }}/{{ config }}_{{ guid }}_{{ item }}"
        dest: "~{{ ansible_user }}/{{ cluster_name }}/auth/{{ item }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: u=rw,go=
      loop:
      - kubeconfig
      - kubeadmin-password

    - name: Make sure .kube directory exists for {{ ansible_user }}
      ansible.builtin.file:
        state: directory
        path: "~{{ ansible_user }}/.kube"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: u=rwx,go=

    - name: Make sure .kube directory exists for root
      ansible.builtin.file:
        state: directory
        path: /root/.kube
        owner: root
        group: root
        mode: u=rwx,go=

    - name: Copy cluster kubeconfig to ~{{ ansible_user }}/.kube/config
      ansible.builtin.copy:
        remote_src: true
        src: "~{{ ansible_user }}/{{ cluster_name }}/auth/kubeconfig"
        dest: "~{{ ansible_user }}/.kube/config"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: u=rw,go=

    - name: Copy cluster kubeconfig to /root/.kube/config
      ansible.builtin.copy:
        remote_src: true
        src: "~{{ ansible_user }}/{{ cluster_name }}/auth/kubeconfig"
        dest: /root/.kube/config
        owner: root
        group: root
        mode: u=rw,go=

    - name: Set up student user
      when: bastion_setup_student_user | bool
      block:
      - name: Make sure .kube directory exists in ~{{ bastion_student_user_name }}
        ansible.builtin.file:
          state: directory
          path: "~{{ bastion_student_user_name }}/.kube"
          owner: "{{ bastion_student_user_name }}"
          group: users
          mode: u=rwx,go=

      - name: Set up kubeconfig for student user
        ansible.builtin.copy:
          src: "~{{ ansible_user }}/{{ cluster_name }}/auth/kubeconfig"
          dest: "~{{ bastion_student_user_name }}/.kube/config"
          remote_src: true
          owner: "{{ bastion_student_user_name }}"
          group: users
          mode: u=rw,go=

      - name: Create OpenShift Bash completion file
        ansible.builtin.shell: oc completion bash >/etc/bash_completion.d/openshift

- name: Gather and Print cluster info
  ansible.builtin.import_tasks: print_cluster_info.yml

- name: Find installer Pods with label app=installer in error status
  kubernetes.core.k8s_info:
    kubeconfig: "{{ hostvars.localhost.output_dir }}/{{ config }}_{{ guid }}_kubeconfig"
    api_version: v1
    kind: Pod
    label_selectors:
    - app=installer
    field_selectors:
    - status.phase=Failed
  register: r_pod_info
  delay: 30
  retries: 10
  until: r_pod_info is success

- name: Delete error pods
  kubernetes.core.k8s:
    kubeconfig: "{{ hostvars.localhost.output_dir }}/{{ config }}_{{ guid }}_kubeconfig"
    definition:
      apiVersion: v1
      kind: Pod
      metadata:
        name: "{{ pod.metadata.name }}"
        namespace: "{{ pod.metadata.namespace }}"
    state: absent
  loop: "{{ r_pod_info.resources }}"
  loop_control:
    loop_var: pod
