---
- name: Generate fsx admin password and make sure it contains numbers
  when: ocp_dr_trident_fsx_admin_password | default('') | length == 0
  block:
  - name: Generate password components
    ansible.builtin.set_fact:
      password_fsx_admin_lower: "{{ lookup('ansible.builtin.password', '/dev/null', length=8, chars='ascii_lowercase') }}"
      password_fsx_admin_upper: "{{ lookup('ansible.builtin.password', '/dev/null', length=4, chars='ascii_uppercase') }}"
      password_fsx_admin_digits: "{{ lookup('ansible.builtin.password', '/dev/null', length=3, chars='digits') }}"

  - name: Combine and shuffle password components
    ansible.builtin.set_fact:
      password_fsx_admin_combined: >-
        {{ (password_fsx_admin_upper + password_fsx_admin_lower + password_fsx_admin_digits) | shuffle | join('') }}

  - name: Ensure the first character is not a digit
    ansible.builtin.set_fact:
      _ocp_dr_trident_fsx_admin_password_tmp: >-
        {% if password_fsx_admin_combined[0].isdigit() %}
        {{ (password_fsx_admin_combined[1:] + password_fsx_admin_combined[0]) }}
        {% else %}
        {{ password_fsx_admin_combined }}
        {% endif %}

  - name: Trim fsx password
    ansible.builtin.set_fact:
      _ocp_dr_trident_fsx_admin_password: "{{ _ocp_dr_trident_fsx_admin_password_tmp | trim }}"

  - name: Debug the generated fsx admin password
    ansible.builtin.debug:
      msg: "Generated Password: '{{ _ocp_dr_trident_fsx_admin_password }}'"

- name: Use provided fsx admin password
  when: ocp_dr_trident_fsx_admin_password | default('') | length > 0
  ansible.builtin.set_fact:
    _ocp_dr_trident_fsx_admin_password: >-
      {{ ocp_dr_trident_fsx_admin_password | trim }}

- name: Generate svm admin password and make sure it contains numbers
  when: ocp_dr_trident_svm_admin_password | default('') | length == 0
  block:
  - name: Generate password components
    ansible.builtin.set_fact:
      password_svm_admin_lower: "{{ lookup('ansible.builtin.password', '/dev/null', length=8, chars='ascii_lowercase') }}"
      password_svm_admin_upper: "{{ lookup('ansible.builtin.password', '/dev/null', length=4, chars='ascii_uppercase') }}"
      password_svm_admin_digits: "{{ lookup('ansible.builtin.password', '/dev/null', length=3, chars='digits') }}"

  - name: Combine and shuffle password components
    ansible.builtin.set_fact:
      password_svm_admin_combined: >-
        {{ (password_svm_admin_upper + password_svm_admin_lower + password_svm_admin_digits) | shuffle | join('') }}

  - name: Ensure the first character is not a digit
    ansible.builtin.set_fact:
      _ocp_dr_trident_svm_admin_password_tmp: >-
        {% if password_svm_admin_combined[0].isdigit() %}
        {{ (password_svm_admin_combined[1:] + password_svm_admin_combined[0]) }}
        {% else %}
        {{ password_svm_admin_combined }}
        {% endif %}

  - name: Trim svm password
    ansible.builtin.set_fact:
      _ocp_dr_trident_svm_admin_password: "{{ _ocp_dr_trident_svm_admin_password_tmp | trim }}"

  - name: Debug the generated svm admin password
    ansible.builtin.debug:
      msg: "Generated Password: '{{ _ocp_dr_trident_svm_admin_password }}'"

- name: Use provided svm admin password
  when: ocp_dr_trident_svm_admin_password | default('') | length > 0
  ansible.builtin.set_fact:
    _ocp_dr_trident_svm_admin_password: >-
      {{ ocp_dr_trident_svm_admin_password | trim }}

- name: Get subnet ID for first ROSA cluster
  amazon.aws.ec2_vpc_subnet_info:
    access_key: "{{ trident_one.aws_access_key_id }}"
    secret_key: "{{ trident_one.aws_secret_access_key }}"
    region: "{{ trident_one.aws_default_region }}"
    filters:
      # ROSA Classic is /18, ROSA HCP is /24
      cidr-block: "{{ ocp_dr_trident_one_rosa_cidr | replace('/16', '/24') }}"
  register: r_subnet_rosa1

- name: Get subnet ID for second ROSA cluster
  amazon.aws.ec2_vpc_subnet_info:
    access_key: "{{ trident_two.aws_access_key_id }}"
    secret_key: "{{ trident_two.aws_secret_access_key }}"
    region: "{{ trident_two.aws_default_region }}"
    filters:
      # ROSA Classic is /18, ROSA HCP is /24
      cidr-block: "{{ ocp_dr_trident_two_rosa_cidr | replace('/16', '/24') }}"
  register: r_subnet_rosa2

- name: Get VPC ID for first ROSA cluster
  amazon.aws.ec2_vpc_subnet_info:
    access_key: "{{ trident_one.aws_access_key_id }}"
    secret_key: "{{ trident_one.aws_secret_access_key }}"
    region: "{{ trident_one.aws_default_region }}"
    filters:
      # ROSA Classic is /18, ROSA HCP is /24
      # cidr-block: "{{ ocp_dr_trident_first_rosa_cidr | regex_replace('/16', '/18') }}"
      cidr-block: "{{ ocp_dr_trident_one_rosa_cidr | regex_replace('/16', '/24') }}"
  register: r_vpc_rosa1

- name: Get VPC ID for second ROSA cluster
  amazon.aws.ec2_vpc_subnet_info:
    access_key: "{{ trident_two.aws_access_key_id }}"
    secret_key: "{{ trident_two.aws_secret_access_key }}"
    region: "{{ trident_two.aws_default_region }}"
    filters:
      # cidr-block: "{{ ocp_dr_trident_two_rosa_cidr | regex_replace('/16', '/18') }}"
      cidr-block: "{{ ocp_dr_trident_two_rosa_cidr | regex_replace('/16', '/24') }}"
  register: r_vpc_rosa2

- name: Set facts about subnet IDs and vpc IDs
  ansible.builtin.set_fact:
    subnet_id_rosa1: "{{ r_subnet_rosa1.subnets[0].subnet_id }}"
    subnet_id_rosa2: "{{ r_subnet_rosa2.subnets[0].subnet_id }}"
    vpc_id_rosa1: "{{ r_vpc_rosa1.subnets[0].vpc_id }}"
    vpc_id_rosa2: "{{ r_vpc_rosa2.subnets[0].vpc_id }}"

- name: Print Subnet and VPC IDs
  ansible.builtin.debug:
    msg: "{{ item }}"
  loop:
  - "Rosa 1 Subnet ID: {{ subnet_id_rosa1 }}, VPC ID: {{ vpc_id_rosa1 }}"
  - "Rosa 2 Subnet ID: {{ subnet_id_rosa2 }}, VPC ID: {{ vpc_id_rosa2 }}"

# takes about 20 minutes - runs in parallel with the next
- name: Create first FSx ONTAP stack
  amazon.aws.cloudformation:
    access_key: "{{ trident_one.aws_access_key_id }}"
    secret_key: "{{ trident_one.aws_secret_access_key }}"
    stack_name: "{{ ocp_dr_trident_fsx_name1 }}"
    region: "{{ trident_one.aws_default_region }}"
    template_body: "{{ lookup('ansible.builtin.file', 'FSxONTAP.yml') }}"
    disable_rollback: true
    capabilities: CAPABILITY_NAMED_IAM
    template_parameters:
      Subnet1ID: "{{ subnet_id_rosa1 }}"
      myVpc: "{{ vpc_id_rosa1 }}"
      FileSystemName: "{{ ocp_dr_trident_fsx_name1 }}"
      StorageVMName: "{{ ocp_dr_trident_fsx_storage_vm_name1 }}"
      ThroughputCapacity: 512
      FSxAllowedCIDR: "{{ ocp_dr_trident_first_rosa_cidr }}"
      FsxAdminPassword: "{{ _ocp_dr_trident_fsx_admin_password }}"
      SvmAdminPassword: "{{ _ocp_dr_trident_svm_admin_password }}"
      TridentIAMPolicyName: "{{ ocp_dr_trident_policy_name1 }}"
  async: 1800 # 30 minutes
  poll: 0
  register: r_cloudformation_rosa1

# takes about 20 minutes
- name: Create second FSx ONTAP stack
  amazon.aws.cloudformation:
    access_key: "{{ trident_two.aws_access_key_id }}"
    secret_key: "{{ trident_two.aws_secret_access_key }}"
    stack_name: "{{ ocp_dr_trident_fsx_name2 }}"
    region: "{{ trident_two.aws_default_region }}"
    template_body: "{{ lookup('ansible.builtin.file', 'FSxONTAP.yml') }}"
    disable_rollback: true
    capabilities: CAPABILITY_NAMED_IAM
    template_parameters:
      Subnet1ID: "{{ subnet_id_rosa2 }}"
      myVpc: "{{ vpc_id_rosa2 }}"
      FileSystemName: "{{ ocp_dr_trident_fsx_name2 }}"
      StorageVMName: "{{ ocp_dr_trident_fsx_storage_vm_name2 }}"
      ThroughputCapacity: 512
      FSxAllowedCIDR: "{{ ocp_dr_trident_second_rosa_cidr }}"
      FsxAdminPassword: "{{ _ocp_dr_trident_fsx_admin_password }}"
      SvmAdminPassword: "{{ _ocp_dr_trident_svm_admin_password }}"
      TridentIAMPolicyName: "{{ ocp_dr_trident_policy_name2 }}"
  async: 1800 # 30 minutes
  poll: 0
  register: r_cloudformation_rosa2

- name: Check on an async FSx ONTAP task rosa1
  # vars:
  #   ansible_async_directory: "/home/runner/"
  ansible.builtin.async_status:
    jid: "{{ r_cloudformation_rosa1.ansible_job_id }}"
    # results_file: "{{ r_cloudformation_rosa1.results_file }}"
  register:  r_cloudformation_rosa1_job_result
  until:  r_cloudformation_rosa1_job_result.finished
  retries: 180 # 30 minutes
  delay: 10

- name: Check on an async FSx ONTAP task rosa2
  # vars:
  #   ansible_async_directory: "/home/runner/"
  ansible.builtin.async_status:
    jid: "{{ r_cloudformation_rosa2.ansible_job_id }}"
  register: r_cloudformation_rosa2_job_result2
  until: r_cloudformation_rosa2_job_result2.finished
  retries: 180 # 30 minutes
  delay: 10

- name: Save AgnosticD ROSA user data
  agnosticd.core.agnosticd_user_info:
    data:
      fsxontap_name1: "{{ ocp_dr_trident_fsx_name1 }}"
      fsxontap_name2: "{{ ocp_dr_trident_fsx_name2 }}"
      fsxontap_storagevm_name1: "{{ ocp_dr_trident_fsx_storage_vm_name1 }}"
      fsxontap_storagevm_name2: "{{ ocp_dr_trident_fsx_storage_vm_name2 }}"
      fsx_admin_password: "{{ _ocp_dr_trident_fsx_admin_password }}"
      svm_admin_password: "{{ _ocp_dr_trident_svm_admin_password }}"
