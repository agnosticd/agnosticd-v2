#!/bin/bash
# -------------------------------------------------------------------
# agd
#
# AgnosticD V2 setup / provision /destroy script
# This script can be used to setup a local development environment
# for AgnosticD V2 on both RHEL 9.x and macOS
#
# See /docs/setup.adoc for instructions.
# -------------------------------------------------------------------
# Args:
#   agd action [--guid ABCD --config config_name --account account_name]
# Example:
#   agd setup
#   agd provision --guid wkaws --config openshift-cluster --account sandbox1275
#   agd destroy   --guid wkaws --config openshift-cluster --account sandbox1275
#   agd stop      --guid wkaws --config openshift-cluster --account sandbox1275
#   agd start     --guid wkaws --config openshift-cluster --account sandbox1275
#   agd status    --guid wkaws --config openshift-cluster --account sandbox1275
# Note:
#   config_name uses the file `../agnosticd-v2-vars/<config_name>.yml`
#   account_name uses the file `../agnosticd-v2-secrets/secret-<secret_name>.yml`
# -------------------------------------------------------------------

# Exit on error, treat unset variables as errors, fail on pipeline errors
set -euo pipefail

# Directories
readonly VARS_DIR="../agnosticd-v2-vars"
readonly SECRETS_DIR="../agnosticd-v2-secrets"
readonly VENV_DIR="../agnosticd-v2-virtualenv"
readonly OUTPUT_DIR_ROOT="../agnosticd-v2-output"

# Predefine variables for parameters
GUID=""
CONFIG_NAME=""
ACCOUNT_NAME=""

# -------------------------------------------------------------------
# print_usage()
#
# Function to print correct usage of the command
# -------------------------------------------------------------------
print_usage() {
  echo ""
  echo "Usage:"
  echo ""
  echo "$0 action [--guid ABCD --config config_name --account account_name]"
  echo "$0 action [-g ABCD -c config_name -a account_name]"
  echo ""
  echo "Examples:"
  echo "  $0 setup"
  echo "  $0 provision --guid wkaws --config openshift-cluster --account sandbox1275"
  echo "  $0 destroy   --guid wkaws --config openshift-cluster --account sandbox1275"
  echo "  $0 stop      --guid wkaws --config openshift-cluster --account sandbox1275"
  echo "  $0 start     --guid wkaws --config openshift-cluster --account sandbox1275"
  echo "  $0 status    --guid wkaws --config openshift-cluster --account sandbox1275"
  echo ""
}

# -------------------------------------------------------------------
# command_exists()
#
# Function to check if a command exists on the system
# -------------------------------------------------------------------
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# -------------------------------------------------------------------
# agd_setup()
#
# Function to setup AgnosticD V2
# -------------------------------------------------------------------
agd_setup() {
  echo
  echo "********************************************************"
  echo "AgnosticD V2 Setup"
  echo "********************************************************"

  echo
  echo "********************************************************"
  echo "Check if podman is installed..."
  # Check if Podman is installed
  if ! command_exists podman; then
      echo "  ERROR: Podman must be installed"
      exit 1
  fi

  # Directories to check and create if they don't exist
  directories=("$OUTPUT_DIR_ROOT" "$SECRETS_DIR" "$VARS_DIR")

  echo
  echo "*****************************************************************"
  echo "Check if directories exist. Create and seed them if they don't..."
  for dir in "${directories[@]}"; do
      if [ ! -d "$dir" ]; then
          echo "  Directory $dir does not exist. Creating it..."
          mkdir -p "$dir"

          # Copy template files if necessary
          if [ "$dir" == "$SECRETS_DIR" ]; then
              cp bin/templates/secrets.yml "$dir" 2>&1 >/dev/null
              cp bin/templates/secrets-sandboxXXX.yml "$dir" 2>&1 >/dev/null
              echo "  Copied secrets template files to $dir"
          elif [ "$dir" == "$VARS_DIR" ]; then
              cp bin/templates/openshift-cluster-*.yml "$dir" 2>&1 >/dev/null
              echo "  Copied config template files to $dir"
          fi
      fi
  done

  echo
  echo "*****************************************************************"
  echo "Check if VirtualEnv is set up already. Set it up if not..."

  if command_exists python3; then

      # ensure the version is 3.11 or higher
      if [[ "$(python3 --version | cut -d' ' -f2 | cut -d'.' -f1)" -lt 3 || "$(python3 --version | cut -d' ' -f2 | cut -d'.' -f2)" -lt 11 ]]; then
          echo "  ERROR: Python version 3.11 or higher is required."
          exit 1
      fi
      if [ -d "$VENV_DIR" ]; then
          echo "  Activating existing virtual environment."
          source "$VENV_DIR/bin/activate"
      else
          echo "  Creating new virtual environment..."
          python3 -m venv "$VENV_DIR" 2>&1 >/dev/null

          source "$VENV_DIR/bin/activate"
          pip3 install --upgrade pip 2>&1 >/dev/null
      fi
  else
      echo "  ERROR: Python 3.11 or higher must be installed."
      exit 1
  fi

  echo
  echo "*****************************************************************"
  echo "Check if software is installed in the virtual env..."

  if ! command_exists ansible-navigator; then
    echo "  Installing ansible developer tools..."
    pip install ansible-dev-tools 2>&1 >/dev/null
  fi

  echo
  echo "*****************************************************************"
  echo "Setup complete."
  echo "*****************************************************************"
  echo
}

# -------------------------------------------------------------------
# init_podman()
#
# Function to make sure a podman machine suitable to run AgnosticD
# exists for macOS
# The name of the Podman machine is `agnosticd`
# NOTE: For Ansible Navigator the Podman machine *must* be the
#       default machine.
# -------------------------------------------------------------------
init_podman() {
  # Check if AgnosticD Podman machine already exists
  PODMAN_MACHINE=$(podman machine list --format json | jq -r '.[] | select(.Name | contains("agnosticd")) .Name')
  if [ "${PODMAN_MACHINE}" == "agnosticd" ]
  then
    # AgnosticD Podman machine exists. Check if it's running already
    VM_RUNNING=$(podman machine list --format json | jq -r '.[] | select(.Name | contains("agnosticd")) .Running')
    if [ "${VM_RUNNING}" != "true" ]; then
      # AgnosticD Podman machine exists - but is not running. Start it.
      podman machine start agnosticd
    fi
  else
    # AgnosticD Podman machine does not yet exists. Create and start it.
    podman machine init \
      --cpus 4 \
      --memory 8192 \
      --now \
      agnosticd

    # Set the agnosticd machine to be the default machine.
    podman system connection default agnosticd
  fi
}

# -------------------------------------------------------------------
# unsupported_os()
#
# Print error message and exit if not running on a supported OS
# -------------------------------------------------------------------
unsupported_os() {
  echo "ERROR: Unsupported Operating System."
  echo "       Please run this script on RHEL 9.x, Fedora 41+ or macOS."
  exit 1
}

# -------------------------------------------------------------------
# run_ansible_navigator()
#
# Run ansible-navigator
# -------------------------------------------------------------------
run_ansible_navigator() {
  local action="$1"
  local playbook="$2"

  if [ ! -d "${OUTPUT_DIR_ROOT}/${GUID}" ]; then
    mkdir -p "${OUTPUT_DIR_ROOT}/${GUID}"
  fi

  if [ ! -d "${OUTPUT_DIR_ROOT}/${GUID}/requirements_collections/ansible_collections" ]; then
    mkdir -p ${OUTPUT_DIR_ROOT}/${GUID}/requirements_collections/ansible_collections
  fi

  export ANSIBLE_LOG_PATH="/output_dir_root/${GUID}/${GUID}.log"
  export ANSIBLE_NAVIGATOR_PLAYBOOK_ARTIFACT_SAVE_AS=/output_dir_root/${GUID}

  ansible-navigator run "ansible/${playbook}" \
    --extra-vars "ACTION=${action}" \
    --extra-vars "guid=${GUID}" \
    --extra-vars "uuid=${GUID}" \
    --extra-vars "@/vars/${CONFIG_NAME}.yml" \
    --extra-vars "@/secrets/secrets-${ACCOUNT_NAME}.yml" \
    --extra-vars "@/secrets/secrets.yml" \
    --extra-vars "output_dir=/output_dir_root/${GUID}" \
    --execution-environment-volume-mounts ${VARS_DIR}:/vars:Z \
    --execution-environment-volume-mounts ${SECRETS_DIR}:/secrets:Z \
    --execution-environment-volume-mounts ${OUTPUT_DIR_ROOT}:/output_dir_root:Z \
    --execution-environment-volume-mounts ${OUTPUT_DIR_ROOT}/${GUID}/requirements_collections:/home/runner/.ansible/collections:Z \
    --mode stdout
}

# -------------------------------------------------------------------
#
# Main logic
#
# -------------------------------------------------------------------

# Check if we are inside the agnosticd-v2 directory
if [ "$(basename "$PWD")" != "agnosticd-v2" ]; then
    echo "  ERROR: This script must be run from within the agnosticd-v2 directory."
    exit 1
fi

# Process command line parameters
if [[ $# -eq 1 && (  "${1}" == "setup"  || "${1}" == "init" ) ]]; then
  agd_setup
  exit 0
elif [[ $# -eq 7 && ("${1}" == "provision" || "${1}" == "destroy" || "${1}" == "stop" || "${1}" == "start" || "${1}" == "status" ) ]]; then
  ACTION="${1}"
  shift
  VALID_ARGS=$(getopt -o g:c:a: --long guid:,config:,account: -- "$@")

  # Parse GUID, CONFIG_NAME and ACCOUNT from command line arguments
  while [ $# -gt 0 ]; do
    case "$1" in
      -g | --guid)
        GUID="${2}"
        shift 2
        ;;
      -c | --config)
        CONFIG_NAME="${2}"
        shift 2
        ;;
      -a | --account)
        ACCOUNT_NAME="${2}"
        shift 2
        ;;
      *)
        echo "ERROR: Unknown parameter '${1}'."
        print_usage
        exit 1
        ;;
    esac
  done

  # Check if required parameters are provided
  if [ -z "${GUID:-}" ] || [ -z "${CONFIG_NAME:-}" ] || [ -z "${ACCOUNT_NAME:-}" ]; then
    echo "ERROR: Missing parameters."
    print_usage
    exit 1
  fi
else
  # Neither setup, provision, destroy, stop or start
  print_usage
  exit 1
fi

# Check Operating System and set things up if necessary
if [[ "$(uname)" == "Darwin" ]]; then
  # Initialize Podman Machine for macOS
  init_podman
elif [[ -f /etc/os-release ]]; then
  source /etc/os-release
  [[ ("$ID" == "rhel" && "$VERSION_ID" =~ ^9\.) || ("$ID" == "fedora" && "$VERSION_ID" -ge 41) ]] || unsupported_os
else
  unsupported_os
fi

# Check for and initialize Virtual Environment
if [ -d "$VENV_DIR" ]; then
  source "$VENV_DIR/bin/activate"
else
  echo "  ERROR: Virtual Environment does not exist. Run '${0} setup'..."
fi

if [[ "$ACTION" == "provision" ]]; then
  run_ansible_navigator "provision" "main.yml"
elif [[ "$ACTION" == "destroy" ]]; then
  run_ansible_navigator "destroy" "destroy.yml"
elif [[ "$ACTION" == "stop" || "$ACTION" == "start" || "$ACTION" == "status" ]]; then
  run_ansible_navigator "$ACTION" "lifecycle_entry_point.yml"
fi
