---
- name: Step 001 Deploy Infrastructure
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - step001
    - deploy_infrastructure
  tasks:
    # This provider doesnt currently define instances:
    - name: Create ssh provision key
      ansible.builtin.include_role:
        name: create_ssh_provision_key
      when:
        - ssh_provision_key_name is undefined

    - name: Locate environment SSH key
      ansible.builtin.include_role:
        name: locate_env_authorized_key

    - name: Ensure gcloud is installed
      environment:
        PATH: '{{ output_dir }}/google-cloud-sdk/bin:/usr/bin:/usr/local/bin'
      ansible.builtin.command: which gcloud
      register: gcloud_result

    - name: Fail if gcloud not available
      ansible.builtin.fail:
        msg: you need Google Cloud SDK installed
      when: gcloud_result is failed

    - name: Set the destination for the template
      ansible.builtin.set_fact:
        t_dest: "{{output_dir}}/{{ config }}.{{ guid }}.{{cloud_provider}}_cloud_template"
      tags:
        - gcp_infrastructure_deployment
        - validate_gcp_template
        - gen_gcp_template

    - name: Get future timestamp
      ansible.builtin.command: date -d "1 year" +"%Y-%m-%dT%H:%M:%S%z"
      register: future

    - name: Set expire time variable
      ansible.builtin.set_fact:
        expire_time: "{{ future.stdout }}"

    - name: Create an bastion external IP
      google.cloud.gcp_compute_address:
        name: "bastion-ip-{{ guid }}"
        region: "{{ gcp_region }}"
        project: "{{ gcp_project_id }}"
        auth_kind: "{{ gcp_auth_type }}"
        service_account_file: "{{ gcp_credentials_file }}"
        state: present
      register: gcp_bastion_external_address

    - name: Generate GCP deployment manager template
      ansible.builtin.template:
        src: "./files/cloud_providers/{{cloud_provider}}_cloud_template.j2"
        dest: "{{t_dest}}"
      tags:
        - gcp_infrastructure_deployment
        - validate_gcp_template
        - gen_gcp_template

    - name: Starting Google deployment-manager with template
      environment:
        PATH: '{{ output_dir }}/google-cloud-sdk/bin:/usr/bin:/usr/local/bin'
        CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE: "{{ gcp_credentials_file }}"
        CLOUDSDK_COMPUTE_REGION: "{{ gcp_region }}"
        CLOUDSDK_CONFIG: "{{ output_dir }}/.gcloud-{{ guid }}"
        CLOUDSDK_CORE_PROJECT: "{{ gcp_project_id }}"
      ansible.builtin.command: >-
        gcloud deployment-manager deployments
        create "{{ project_tag }}-base"
        --config "{{ t_dest }}"
      register: gcp_deploy
      tags:
        - gcp_infrastructure_deployment
        - gcp_deployment_manager
      until: gcp_deploy is succeeded
      retries: 0

    - ansible.builtin.debug:
        var: gcp_deploy
        verbosity: 2
      tags:
        - gcp_infrastructure_deployment

    - name: Run infra-gcp-create-inventory Role
      ansible.builtin.include_role:
        name: infra-gcp-create-inventory

    - name: Fetch DNS zone info from openenv
      google.cloud.gcp_dns_managed_zone_info:
        dns_name: '{{ cluster_dns_zone + "."}}'
        project: "{{ gcp_project_id }}"
        auth_kind: "{{ gcp_auth_type }}"
        service_account_file: "{{ gcp_credentials_file }}"
      register: gcp_managed_zone
      tags:
        - gcp_infrastructure_deployment
      when:
        - cluster_dns_zone is defined
        - dns_bastion | default(false) | bool
        - groups["bastions"] is defined

    - name: Add bastion entry to the main DNSZone
      google.cloud.gcp_dns_resource_record_set:
        project: "{{ gcp_project_id }}"
        auth_kind: "{{ gcp_auth_type }}"
        service_account_file: "{{ gcp_credentials_file }}"
        managed_zone: "{{ gcp_managed_zone.resources[0] }}"
        # name: '{{ "bastion." + guid + "." + cluster_dns_zone + "."}}'
        name: '{{ "bastion" + "." + cluster_dns_zone + "."}}'
        type: A
        ttl: 300
        target:
          - '{{ hostvars[item].public_ip_address }}'
        state: present
      loop: "{{ groups['bastions'] }}"
      tags:
        - gcp_infrastructure_deployment
        - gcp_set_bastion_dns
      when:
        - dns_bastion | default(false) | bool
        - groups["bastions"] is defined

    - name: Add node entry to the main DNSZone
      google.cloud.gcp_dns_resource_record_set:
        project: "{{ gcp_project_id }}"
        auth_kind: "{{ gcp_auth_type }}"
        service_account_file: "{{ gcp_credentials_file }}"
        managed_zone: "{{ gcp_managed_zone.resources[0] }}"
        # name: '{{ "node." + guid + "." + cluster_dns_zone + "."}}'
        name: '{{ "node" + "." + cluster_dns_zone + "."}}'
        type: A
        ttl: 300
        target:
          - '{{ hostvars[item].public_ip_address }}'
        state: present
      loop: "{{ groups['nodes'] }}"
      tags:
        - gcp_infrastructure_deployment
      when:
        - groups["nodes"] is defined

# Copy env_vars variables from the config to all hosts
- import_playbook: ../../include_vars.yml

- name: Configure local ssh config for bastion proxy use
  import_playbook: "../../cloud_providers/{{cloud_provider}}_ssh_config_setup.yml"
  when: groups["bastions"] is defined and (groups["bastions"]|length>0)
  tags:
    - must
    - create_inventory

- name: wait_for_connection for all non-windows machines and set hostname
  hosts:
    - all:!windows:!network
  gather_facts: false
  become: true
  tags:
    - step001
    - wait_ssh
    - set_hostname
  tasks:
    - name: wait for linux host to be available
      ansible.builtin.wait_for_connection:
        timeout: 300
      register: rwait
      ignore_errors: true

    - name: restart instance if wait_for_connection failed
      become: false
      ansible.builtin.command: "gcloud compute instances reset '{{inventory_hostname}}' --zone '{{ gcp_zone }}'"
      delegate_to: localhost
      environment:
        CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE: "{{ gcp_credentials_file }}"
        CLOUDSDK_COMPUTE_REGION: "{{ gcp_region }}"
        CLOUDSDK_CONFIG: "{{ output_dir }}/.gcloud-{{ guid }}"
        CLOUDSDK_CORE_PROJECT: "{{ gcp_project_id }}"
        PATH: '{{ output_dir }}/google-cloud-sdk/bin:/usr/bin:/usr/local/bin'
      when: rwait is failed

    - name: wait for linux host to be available (retry)
      ansible.builtin.wait_for_connection:
      when: rwait is failed

    - ansible.builtin.ping:
      register: rping
      retries: 3
      delay: 10
      until: rping is succeeded

    - name: Add authorized_keys
      ansible.builtin.include_role:
        name: ssh_authorized_keys
      when: >-
        ssh_authorized_keys | default([]) | length > 0
        or
        all_ssh_authorized_keys | default([]) | length > 0

    - name: Populate /etc/hosts
      ansible.builtin.lineinfile:
        dest: /etc/hosts
        regexp: ' {{hostvars[item].internaldns}}$'
        line: '{{hostvars[item].private_ip_address}} {{hostvars[item].internaldns}}'
      loop: "{{ groups['all'] }}"
